service: mimoo
frameworkVersion: '3'

plugins:
  - serverless-offline
  - serverless-auto-swagger

custom:
  tableName: 'tools-table-${sls:stage}'
  serverless-offline:
    useChildProcesses: true
    noAuth: true
  autoswagger:
        title: 'Mimoo API - Service Tools'
        apiType: 'httpApi'
        generateSwaggerOnDeploy: false
        apiKeyHeaders: ['Authorization', 'anyOtherName']


provider:
  name: aws
  runtime: nodejs18.x
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
          - cognito-idp:AdminInitiateAuth
          - cognito-idp:AdminCreateUser
          - cognito-idp:AdminSetUserPassword
          Resource: "*"
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [ UsersTable, Arn ]
  environment:
    USER_POOL: { Ref: UserPool } #us-east-1_pXQVf5XVX
    USER_POOL_CLIENT: { Ref: UserClient } #3vktmpciheao8dutf6o9f4auv6
    TOOLS_TABLE: ${self:custom.tableName}
  httpApi:
    cors: true
    authorizers: 
      userAuthoriser:
        identitySource: $request.header.Authorization
        issuerUrl: {"Fn::Join": ["", ["https://cognito-idp.us-east-1.amazonaws.com/", { Ref: UserPool }]]}
        audience: { Ref: UserClient }


functions:
  delete:
    handler: controllers/delete.delete
    events:
      - httpApi:
          path: /tools/{toolId}
          method: delete
          authorizer: 
            name: userAuthoriser
  update:
    handler: controllers/update.update
    events:
      - httpApi:
          path: /tools/{toolId}
          method: put
          authorizer: 
            name: userAuthoriser
  get:
    handler: controllers/get.get
    events:
      - httpApi:
          path: /tools/{toolId}
          method: get
          authorizer: 
            name: userAuthoriser
  create:
    handler: controllers/create.create
    events:
      - httpApi:
          path: /tools
          method: post
          authorizer: 
            name: userAuthoriser
  list:
    handler: controllers/list.list
    events:
      - httpApi:
          path: /tools
          method: get
  register:
    handler: controllers/register.register
    events:
      - httpApi:
          path: /register
          method: post
  login:
    handler: controllers/login.login
    events:
      - httpApi:
          path: /login
          method: post
  getTag:
    handler: controllers/getTag.get
    events:
      - httpApi:
          path: /getTag
          method: get


resources:
  Resources:
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties: 
        UserPoolName: ${self:service}-pool-${sls:stage}
        Schema:
          - Name: email
            Required: true
            Mutable: true
        Policies:
          PasswordPolicy:
            MinimumLength: 6
        AutoVerifiedAttributes: ["email"]
    UserClient:
      Type: AWS::Cognito::UserPoolClient
      Properties: 
        ClientName: ${self:service}-client-${sls:stage}
        GenerateSecret: false
        UserPoolId:
          Ref: UserPool
        AccessTokenValidity: 5
        IdTokenValidity: 5
        ExplicitAuthFlows:
          - "ADMIN_NO_SRP_AUTH"
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: toolID
            AttributeType: S
        KeySchema:
          - AttributeName: toolID
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.tableName}