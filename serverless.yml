service: mimoo
frameworkVersion: '3'

plugins:
  - serverless-offline
  - serverless-auto-swagger

custom:
  tableName: 'tools-table-${sls:stage}'
  serverless-offline:
    useChildProcesses: true
    noAuth: true
  autoswagger:
    title: 'Mimoo API - Service Tools'
    apiType: 'httpApi'
    generateSwaggerOnDeploy: false
    apiKeyHeaders: ['Authorization']
    useStage: true
    typefiles: ['./swagger/types.ts']
  CognitoAddCustomAttributes: 
    CognitoUserPoolIdOutputKey: { Ref: UserPool }             
    CognitoUserPoolClientIdOutputKey: { Ref: UserClient } 
    CustomAttributes: 
      - 
        AttributeDataType: String
        DeveloperOnlyAttribute: False
        Mutable: True
        Name: name 
        Required: False

provider:
  name: aws
  runtime: nodejs18.x
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
          - cognito-idp:AdminInitiateAuth
          - cognito-idp:AdminCreateUser
          - cognito-idp:AdminSetUserPassword
          Resource: "*"
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [ UsersTable, Arn ]
  environment:
    USER_POOL: { Ref: UserPool } #us-east-1_pXQVf5XVX
    USER_POOL_CLIENT: { Ref: UserClient } #3vktmpciheao8dutf6o9f4auv6
    TOOLS_TABLE: ${self:custom.tableName}
  httpApi:
    cors: true
    authorizers: 
      userAuthoriser:
        identitySource: $request.header.Authorization
        issuerUrl: {"Fn::Join": ["", ["https://cognito-idp.us-east-1.amazonaws.com/", { Ref: UserPool }]]}
        audience: { Ref: UserClient }

functions:
  delete:
    handler: controllers/delete.delete
    events:
      - httpApi:
          path: /tools/{toolId}
          method: delete
          authorizer: 
            name: userAuthoriser
          description: "Delete tools by toolId"
          responses: 
            200: 
              description: "Successfully deleted"
            401:
              description: "Unauthorized"
            404:
              description: "Tool not found!"
            500:
              description: "Internal Server Error"
  update:
    handler: controllers/update.update
    events:
      - httpApi:
          path: /tools/{toolId}
          method: put
          authorizer: 
            name: userAuthoriser
          description: "Update tool by toolId"
          responses: 
            200: 
              description: "Successfully update"
            400:
              description: "Missing required fields"
            401:
              description: "Unauthorized"
            404:
              description: "Tool not found!"
            500:
              description: "Internal Server Error"
          bodyType: 'BodyTool'
  get:
    handler: controllers/get.get
    events:
      - httpApi:
          path: /tools/{toolId}
          method: get
          authorizer: 
            name: userAuthoriser
          description: "Get tools by toolId"
          responses: 
            200: 
              description: "Tool content"
            400:
              description: "Missing required fields"
            401:
              description: "Unauthorized"
            404:
              description: "Tool not found!"
            500:
              description: "Internal Server Error"
  create:
    handler: controllers/create.create
    events:
      - httpApi:
          path: /tools
          method: post
          authorizer: 
            name: userAuthoriser
          description: "Create tool by body request"
          responses: 
            200: 
              description: "Successfully created!"
            400:
              description: "Missing required fields"
            401:
              description: "Unauthorized"
            500:
              description: "Internal Server Error"
          bodyType: 'BodyTool'
  list:
    handler: controllers/list.list
    events:
      - httpApi:
          path: /tools
          method: get
          description: "List the tools!"
          responses: 
            200: 
              description: "Tools list!"
            500:
              description: "Internal Server Error"
  register:
    handler: controllers/register.register
    events:
      - httpApi:
          path: /register
          method: post
          description: "Register new user by email and password by the request body!"
          responses: 
            200: 
              description: "Email and username registered!"
            400:
              description: "Missing required fields"
            500:
              description: "Internal Server Error"
          bodyType: 'BodyUser'
  login:
    handler: controllers/login.login
    events:
      - httpApi:
          path: /login
          method: post
          description: "Login for user!"
          responses: 
            200: 
              description: "Access Token"
            400:
              description: "Missing required fields"
            404:
              description: "User not found!"
            500:
              description: "Internal Server Error"
          bodyType: 'BodyUser'
  getTag:
    handler: controllers/getTag.get
    events:
      - httpApi:
          path: /getTag
          method: get
          queryStringParameters:
            tag: 
              required: true
              type: string
          description: "Get tools by tag"
          responses: 
            200: 
              description: "Tool content"
            500:
              description: "Internal Server Error"
resources:
  Resources:
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties: 
        UserPoolName: ${self:service}-pool-${sls:stage}
        Schema:
          - Name: email
            Required: true
            Mutable: true
        Policies:
          PasswordPolicy:
            MinimumLength: 6
        AutoVerifiedAttributes: ["email"]
    UserClient:
      Type: AWS::Cognito::UserPoolClient
      Properties: 
        ClientName: ${self:service}-client-${sls:stage}
        GenerateSecret: false
        UserPoolId:
          Ref: UserPool
        AccessTokenValidity: 5
        IdTokenValidity: 5
        ExplicitAuthFlows:
          - "ADMIN_NO_SRP_AUTH"
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: toolID
            AttributeType: S
        KeySchema:
          - AttributeName: toolID
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.tableName}