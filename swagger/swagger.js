// this file was generated by serverless-auto-swagger
module.exports = {
  "swagger": "2.0",
  "info": {
    "title": "Mimoo API - Service Tools",
    "version": "1"
  },
  "paths": {
    "/tools/{toolId}": {
      "delete": {
        "summary": "delete",
        "description": "Delete tools by toolId",
        "operationId": "delete.delete./tools/{toolId}",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {

            "Authorization": []

          }
        ],
        "parameters": [
          {
            "name": "toolId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Tool not found!"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "summary": "update",
        "description": "Update tool by toolId",
        "operationId": "update.put./tools/{toolId}",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "Authorization": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Body required in the request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BodyTool"
            }
          },
          {
            "name": "toolId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully update"
          },
          "400": {
            "description": "Missing required fields"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Tool not found!"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "get": {
        "summary": "get",
        "description": "Get tools by toolId",
        "operationId": "get.get./tools/{toolId}",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "Authorization": []
          }
        ],
        "parameters": [
          {
            "name": "toolId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Tool content"
          },
          "400": {
            "description": "Missing required fields"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Tool not found!"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/tools": {
      "post": {
        "summary": "create",
        "description": "Create tool by body request",
        "operationId": "create.post./tools",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "Authorization": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Body required in the request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BodyTool"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created!"
          },
          "400": {
            "description": "Missing required fields"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "get": {
        "summary": "list",
        "description": "List the tools!",
        "operationId": "list.get./tools",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "Authorization": []
          }
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Tools list!"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/register": {
      "post": {
        "summary": "register",
        "description": "Register new user by email and password by the request body!",
        "operationId": "register.post./register",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "Authorization": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Body required in the request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BodyUser"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Email and username registered!"
          },
          "400": {
            "description": "Missing required fields"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/login": {
      "post": {
        "summary": "login",
        "description": "Login for user!",
        "operationId": "login.post./login",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "Authorization": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Body required in the request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BodyUser"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Access Token"
          },
          "400": {
            "description": "Missing required fields"
          },
          "404": {
            "description": "User not found!"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/getTag": {
      "get": {
        "summary": "getTag",
        "description": "Get tools by tag",
        "operationId": "getTag.get./getTag",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "Authorization": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "tag",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Tool content"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  },
  "definitions": {
    "BodyUser": {
      "properties": {
        "email": {
          "title": "BodyUser.email",
          "type": "string"
        },
        "password": {
          "title": "BodyUser.password",
          "type": "string"
        }
      },
      "required": [
        "email",
        "password"
      ],
      "additionalProperties": false,
      "title": "BodyUser",
      "type": "object"
    },
    "BodyTool": {
      "properties": {
        "title": {
          "title": "BodyTool.title",
          "type": "string"
        },
        "link": {
          "title": "BodyTool.link",
          "type": "string"
        },
        "description": {
          "title": "BodyTool.description",
          "type": "string"
        },
        "tags": {
          "items": {
            "title": "BodyTool.tags.[]",
            "type": "string"
          },
          "title": "BodyTool.tags",
          "type": "array"
        }
      },
      "required": [
        "title",
        "link",
        "description",
        "tags"
      ],
      "additionalProperties": false,
      "title": "BodyTool",
      "type": "object"
    }
  },
  "securityDefinitions": {
    "Authorization": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  }
};